name: Build and Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY_API_GATEWAY: api-gateway
  ECR_REPOSITORY_USER_SERVICE: user-service

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push API Gateway image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_API_GATEWAY:$IMAGE_TAG -f apps/api-gateway/Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_API_GATEWAY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY_API_GATEWAY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_API_GATEWAY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_API_GATEWAY:latest

    - name: Build and push User Service image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_USER_SERVICE:$IMAGE_TAG -f apps/user-service/Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_USER_SERVICE:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY_USER_SERVICE:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_USER_SERVICE:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_USER_SERVICE:latest

    - name: Update ECS services
      run: |
        aws ecs update-service --cluster sspm-cluster --service api-gateway-service --force-new-deployment
        aws ecs update-service --cluster sspm-cluster --service user-service-service --force-new-deployment 